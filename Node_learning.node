https://nodejs.org/dist/latest-v10.x/docs/api/fs.html




        O
N               
        E
are tips

        O
N               D
        E
Node Errors

there are four types or erros in node

                        O

            Standard JavaScript errors
            System errors  like opening absent files
N           User-specified errors                            D
            Assertion Errors

                        E

they are at least guaranteed to provide the properties on the error class raised



        O
N               D
        E
Error Propagation and Interception

all errors caught by node generate a     throw exception
they will exit immediately With few exceptions, Synchronous APIs will use throw to report errors.


        O
N               D
        E
Reporting Async API errors
    sometimes the node function has a callback
    file /Error/simple_async_error.js

    sometimes your dealing with eventemitter objets.  errors can be routed to that object's 'error' event.
    file /Error/net_eventemitter_error.js

    look at each method to understand how their errors are handled
        
    the event-emitter and stream-based API are handled with the error event mechanism described in 
    file: /Error/net_eventemitter_error.js

    for event-emitters you need a handler registed for the uncaught Exception or an error will be thrown
    file: /Error/event_emitter_handler.js


        O
N               D
        E
Error-first callbacks
    if there is no error with these types of error handlers the first argument is null


                     O
    node_method.first_err([args], errorFirstCallback);
    function errorFirstCallback(err, data) {
      if (err) {
N        console.error('There was an error', err);     D
        return;
      }
    }    
    file: /Error/first_error_callback.js
                    E


        O
N           dont use try throw catch with async methods they do not work, register a handler with process.on('uncaughtException')
        E    



        O
N               D
        E
Class: Error    

doesn't tell you why an error happened ' it just tells you the stack trace 
for crpyto, there is an additional stack called opensslErrorStack    


                                                O

            new Error(message)
N            makes a new Error object with a message, error.stack prorety contains a sync stack or        E
             the number of frames given by the property Error.stackTraceLimit which is smaller 

                                                D





                                                O

             Error.captureStackTrace(targetObject[, constructorOpt])
            when you call this you add a .stack property to an object it 
            like what happens when js tells you where an error happened
 N           file: /Error/capture_stack_trace.js                                              D

            use the The constructorOpt as fuction when 
            you want to hide error details from an end user 
            file: /Error/capture_stack_trace.js 

                                            E




                                                O
         Error.stackTraceLimit
         Tells you how many steps back it took to get to the error,  
N        if this is a neg or 0 the .stack property wont show anything                       D
         to change it   Error.stackTraceLimit = \d
         file: /Error/capture_stack_trace.js 

                                                E





                                                O

                 error.code 
N                most stable way to understand an error,                                     D
                 they only change between major node distributuions
                 to understand them:https://nodejs.org/dist/latest-v10.x/docs/api/errors.html#nodejs-error-codes
                     to access it it must be accessed through an error handler which catches the error object 
                     only then can you see the code
                 file: Error/first_error_callback.js


                                                E



                                                O
         error.message
 N       the message you add when making a new error, however changing this property may not   
         change the first line of the stack trace. if you call err.stack before changing the message,             D
         subsequent calls to err.stack will keep the orginal message                                                
        
                                                E




                                                O
        error.stack
        <string>
        all calls from beginning of program execution to where the error happened are listed. V8 handles this
        V8 tries to figure out the function names but when it cant is substitutes for <anonymous>
        Frames are only generated for JavaScript functions 
        if you have other embedded programming languages they will not pop up on the trace 
        file : Error/embedded_C_plus_plus_err_stack.js
N            location 
            native, if the frame represents a call internal to V8 (as in [].forEach).                                                   D
            plain-filename.js:line:column, if the frame represents a call internal to Node.js.
            /absolute/path/to/file.js:line:column, if the frame represents a call in a user program, or its dependencies
        the string is lazy generated
        number of frames Error.stackTraceLimit (see above)
        system-level errors are generated as augmented Error instances


                                                E




                                                O    

                Class: AssertionError
                https://nodejs.org/dist/latest-v10.x/docs/api/assert.html#assert_class_assert_assertionerror

                an error subclass that indicates an assertion failure 

                options <OBJECT></OBJECT>
                    message <string> a reg. error message
                    actual <any> 
                    expected <any>
N                   operator <string> which operator was used for the assertion 
                    stackStartFn <Function> removes frames unrelated to the start function where the assertion starts           D
                    code <string> always ERR_ASSERTION
                    generatedMessage <bool> if you cant see the message, this is helpful to 
                    debug why the assertion error message is notcomig up
                    file: Error/assertion_error.js


                                                E






                                                O                                                

                    Class: RangeError
                    when a node code gets a value outside the accetable ranges for its code 
                    Ex:
N                        require('net').connect(-1);                                                D
                        //ranges are 1- 65536
                        file:Error/simple_range_error.js


                                                E



                                                O

                    Class: ReferenceError
                    when you try to access an undefined variable 
N                    its a simple bug unless your are advanced and your software                    D
                    is generating and running code


                                                E




                                                O
        Class: SyntaxError
 N      when you have code that is not JavaScript and has no embedding support          D
        file: Error/simple_syntax_error.js                    

                                                E




                                        O

                     Class: TypeError
N                    when code gets an unwanted code type                 D
                     file: Error/simple_type_error                                                


                                        E




        O
N               D
        E
Exceptions vs. Errors      
a js exception means that something went wrong. they dont have to be shown as Errors, the practical difference is 
some erros are unrecoverable and will cause the process to crash, most can be handled  


        O
N               D
        E
                                                                O

                    System Errors
                    this happens when Node attempt to do things unallowed in the OS system environment its given
                    they are Error objects with more properties

                    Class: SystemError
                    error.address <string>
                    error.address  describing the address to which a network connection failed.
                    file: Error/system_errors.js

                    error.code<string>
                    it represents the error code

                    error.dest<string>
                    represents file destination with a file system error

N                                                                                                                              D
                    error.errno <string> | <number>
                    correspondes to error codes of the libuv library 
                    http://docs.libuv.org/en/v1.x/errors.html

                    error.info<Object>
                    gives details about the error

                    error.message<string>
                    human readable message about the Error

                    error.path<string>
                    info about an invalid path name 
                    file: Error/system_errors.js

                    error.port<number>
                    shows if there is an unavailable port involved

                    error.syscall<string>
                    a failed syscall


                                                                E






Common System Errors
http://man7.org/linux/man-pages/man3/errno.3.html





                         

        



























        O
N               D
        E
Node filesystem
                                                                                                                                               
                                                                                                                                               
fs.rename('/tmp/hello', '/tmp/world', (err) => {
  if (err) throw err;
  fs.stat('/tmp/world', (err, stats) => {
    if (err) throw err;
    console.log(`stats: ${JSON.stringify(stats)}`);
  });
});

    
